# Service name
service: appsync-eventbridgepipe-subscription-delivery

# Serverless Plugins declaration.
plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  region: ${opt:region, "eu-west-1"}
  stage: ${opt:stage, "dev"}
  stackName: ${self:service}-${self:provider.stage}-stack
  timeout: 45

  tracing:
    lambda: true

custom:

# App Sync declaration.
appSync:
  name: appsyncEbPipe
  xrayEnabled: true
  authentication:
    type: API_KEY
  apiKeys:
    - name: appsyncOrderKey

  dataSources: ${file(./dataSources.yml):dataSources}
  pipelineFunctions: ${file(./pipelineFunctions.yml):pipelineFunctions}
  resolvers: ${file(./resolvers.yml)}

resources:
  Resources:
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - KeyType: HASH
            AttributeName: userId
          - KeyType: RANGE
            AttributeName: orderId
        BillingMode: PAY_PER_REQUEST
        TableName: orders
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ExpirationTime
          Enabled: true

    EbPipeServiceRole:
      DependsOn: 
       - orderTable
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ebPipeRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "pipes.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: order-create-appsync-api-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "appsync:GraphQL"
                    - "appsync:GetGraphqlApi"
                    - "appsync:ListGraphqlApis"
                    - "appsync:ListApiKeys"
                  Resource: 
                   - !Join
                    - ""
                    - - !Ref GraphQlApi
                      - "/types/Mutation/fields/createOrder"                  
                - Effect: Allow
                  Action: 
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource: 
                    - !GetAtt orderTable.Arn
                    - !GetAtt orderTable.StreamArn
                - Effect: Allow
                  Action: 
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents        
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - events:InvokeApiDestination
                  Resource: !GetAtt ApiDestination.Arn

    ApiDestination:
      Type: AWS::Events::ApiDestination
      Properties:
        ConnectionArn:
          Fn::GetAtt:
            - ApiConnection
            - Arn
        HttpMethod: POST
        InvocationEndpoint: !GetAtt GraphQlApi.GraphQLUrl
        InvocationRateLimitPerSecond: 300
        Name: AppsyncOrderApi
    
    ApiConnection:
      Type: AWS::Events::Connection
      Properties:
        Name: appsync_connection_ebpipe
        AuthorizationType: API_KEY
        AuthParameters:
          ApiKeyAuthParameters:
            ApiKeyName: x-api-key
            ApiKeyValue: !GetAtt GraphQlApiappsyncOrderKey.ApiKey
    
    PipeCWLogGroup: 
      Type: AWS::Logs::LogGroup
      Properties: 
        RetentionInDays: 3
        LogGroupName: appSyncPipeLogGroup

    Pipe:
      Type: AWS::Pipes::Pipe
      Properties:
        RoleArn: !GetAtt EbPipeServiceRole.Arn
        Name: appSyncPipe
        DesiredState: RUNNING
        Source: !GetAtt orderTable.StreamArn
        SourceParameters:
          DynamoDBStreamParameters:
            BatchSize: 1
            StartingPosition: LATEST
          FilterCriteria:
            Filters:
              - Pattern: '{"eventName":[{"prefix":"INSERT"}]}'
        LogConfiguration:
          CloudwatchLogsLogDestination:
            LogGroupArn: !GetAtt PipeCWLogGroup.Arn
          IncludeExecutionData:
            - ALL
          Level: TRACE
        TargetParameters:
          InputTemplate: |-
            {
              "query": "mutation createOrder($createOrderInput: CreateOrderInput!) { createOrder(createOrderInput: $createOrderInput) { productId } }",
              "variables": {
                "createOrderInput": {
                  "userId": <$.dynamodb.Keys.userId.S>,
                  "orderId": <$.dynamodb.Keys.orderId.S>,
                  "productId": <$.dynamodb.NewImage.productId.S>
                }
              }
            }
        Target:
          Fn::GetAtt:
            - ApiDestination
            - Arn